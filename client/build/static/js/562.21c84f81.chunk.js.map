{"version":3,"file":"static/js/562.21c84f81.chunk.js","mappings":"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","sources":["components/form/Select.js","pages/appointment/timeslots/TimeSlot.js","pages/appointment/timeslots/SlotPicker.js","pages/appointment/SessionDetails.js"],"sourcesContent":["import { classNames } from '../../utilities/utilities';\r\n\r\nexport default function Select({\r\n    id,\r\n    name,\r\n    selected,\r\n    options = [],\r\n    classes,\r\n    defaultValue = '',\r\n    value = '',\r\n    defaultOption = 'Select value',\r\n    addDefaultOption = true,\r\n    required = true,\r\n    onChange = null,\r\n}) {\r\n    return (\r\n        <select\r\n            id={id ? id : name}\r\n            name={name}\r\n            onChange={onChange && onChange}\r\n            autoComplete=\"on\"\r\n            value={value}\r\n            required={required}\r\n            className={classNames(\r\n                'ctx-block ctx-rounded-md  !ctx-border-gray-300 ctx-shadow-sm focus:!ctx-border-gray-900  sm:ctx-text-sm ',\r\n                classes\r\n            )}\r\n        >\r\n            {addDefaultOption && <option value={defaultValue}>{defaultOption}</option>}\r\n            {options.length\r\n                ? typeof options[0] == 'string'\r\n                    ? getArrayOptions(options, selected)\r\n                    : getGroupDropdown(options, selected)\r\n                : getObjectOptions(options, selected)}\r\n        </select>\r\n    );\r\n}\r\n\r\nfunction getGroupDropdown(options, selected) {\r\n    if (!Object.values(options)[0].hasOwnProperty('optionGroup')) {\r\n        return getObjectOptions(options, selected);\r\n    }\r\n\r\n    return Object.values(options).map((optionGroup, i) => {\r\n        {\r\n            return optionGroup.hasOwnProperty('optionGroup') ? (\r\n                <optgroup label={optionGroup.optionGroup} key={i}>\r\n                    {Object.keys(optionGroup.options).map(\r\n                        (optionName, index) => {\r\n                            let currentOption = optionGroup.options[optionName];\r\n                            return (\r\n                                <option key={index} value={optionName}>\r\n                                    {' '}\r\n                                    {currentOption}{' '}\r\n                                </option>\r\n                            );\r\n                        }\r\n                    )}\r\n                </optgroup>\r\n            ) : null;\r\n        }\r\n    });\r\n}\r\n\r\nfunction getObjectOptions(options, selected) {\r\n    return Object.keys(options).map((key, index) => {\r\n        return (\r\n            <option key={index} value={options[key]._id}>\r\n                {' '}\r\n                {options[key].name}{' '}\r\n            </option>\r\n        );\r\n    });\r\n}\r\n\r\nfunction getArrayOptions(options, selected) {\r\n    return options.map((option, index) => {\r\n        return (\r\n            <option key={index} value={option}>\r\n                {' '}\r\n                {option.slice(0, 1).toUpperCase() + option.slice(1, option.length)}{' '}\r\n            </option>\r\n        );\r\n    });\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport langText from './lang';\r\nimport dayjs from 'dayjs';\r\nimport utc from 'dayjs/plugin/utc';\r\nimport duration from 'dayjs/plugin/duration';\r\nimport { amOrPm } from '../../../utilities/timeUtilities';\r\n\r\ndayjs.extend(utc);\r\ndayjs.extend(duration);\r\n\r\nexport default function TimeSlot({\r\n    slot,\r\n    interval,\r\n    lang = 'en',\r\n    selectedSlotColor,\r\n    isSelected,\r\n    onSelect,\r\n    disabled,\r\n    disableColor = '#b9b9b9'\r\n}) {\r\n    const isOnTheHour = slot.get('m') === 0; // e.g: 01:00 is, while 01:05 is not ¯\\_(ツ)_/¯\r\n    const langData = langText[lang];\r\n    const handleOnSelect = (e) => {\r\n        e.preventDefault();\r\n        onSelect(slot);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {disabled ? <div\r\n                className={`sp-timeslot cursor-default py-1 rounded-sm my-1.5  ${disabled ? 'selected' : ''\r\n                    } ${isOnTheHour && 'with-tick'}`}\r\n                style={\r\n                    disabled\r\n                        ? { background: disableColor, color: 'black' }\r\n                        : {}\r\n                }\r\n            >\r\n                <span\r\n                    className=\"sp-label\"\r\n                    style={\r\n                        isSelected\r\n                            ? { background: disableColor, color: 'black' }\r\n                            : {}\r\n                    }\r\n                >\r\n                    {`${slot.format('hh:mm')}${amOrPm(slot)} - `}\r\n                    {`${slot.add(interval, 'm').format('hh:mm')}${amOrPm(\r\n                        slot\r\n                    )}`}\r\n                </span>\r\n                <button\r\n                    disabled={true}\r\n                    className=\"radioBtn\"\r\n                ></button>\r\n            </div> : <div\r\n                onClick={(e) => handleOnSelect(e)}\r\n                className={`sp-timeslot py-1 rounded-sm my-1.5  ${isSelected ? 'selected' : ''\r\n                    } ${isOnTheHour && 'with-tick'}`}\r\n                style={\r\n                    isSelected\r\n                        ? { background: selectedSlotColor, color: 'white' }\r\n                        : {}\r\n                }\r\n            >\r\n                <span\r\n                    className=\"sp-label\"\r\n                    style={\r\n                        isSelected\r\n                            ? { background: selectedSlotColor, color: 'white' }\r\n                            : {}\r\n                    }\r\n                >\r\n                    {`${slot.format('hh:mm')}${amOrPm(slot)} - `}\r\n                    {`${slot.add(interval, 'm').format('hh:mm')}${amOrPm(\r\n                        slot\r\n                    )}`}\r\n                </span>\r\n                <button\r\n                    onClick={(e) => handleOnSelect(e)}\r\n                    className=\"radioBtn\"\r\n                ></button>\r\n            </div>}\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport TimeSlot from './TimeSlot';\r\nimport dayjs from 'dayjs';\r\nimport utc from 'dayjs/plugin/utc';\r\nimport duration from 'dayjs/plugin/duration';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateScheduleState } from '../../../store/schedulesSlice';\r\nimport { amOrPm } from '../../../utilities/timeUtilities';\r\n\r\ndayjs.extend(utc);\r\ndayjs.extend(duration);\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n * @returns\r\n * @url : https://github.com/wassimbj/slotpicker/\r\n */\r\nexport default function SlotPicker({\r\n    interval,\r\n    unAvailableSlots,\r\n    from, // 09:00\r\n    to, // 20:00\r\n    lang,\r\n    selectedSlotColor,\r\n    onSelectTime,\r\n    classes = 'p-5',\r\n    timeSlots = [],\r\n    defaultSelectedTime = [],\r\n}) {\r\n    const { themeColor } = useSelector((state) => state.common);\r\n\r\n    // default stuff\r\n    lang = !lang ? 'en' : lang;\r\n    let disabledSlots = [];\r\n    if (!!unAvailableSlots) {\r\n        disabledSlots = unAvailableSlots;\r\n    }\r\n\r\n    selectedSlotColor = !selectedSlotColor ? themeColor : selectedSlotColor;\r\n    // following the 24-hour clock\r\n    let startsAt = !from ? '08:00' : from; // 8AM\r\n    let endsAt = !to ? '20:00' : to; // 8PM\r\n    if (\r\n        Number.parseInt(startsAt.split(':')[0]) < 0 ||\r\n        Number.parseInt(startsAt.split(':')[0]) > 23 ||\r\n        Number.parseInt(endsAt.split(':')[0]) < 0 ||\r\n        Number.parseInt(endsAt.split(':')[0]) > 23 ||\r\n        Number.parseInt(startsAt.split(':')[1]) < 0 ||\r\n        Number.parseInt(startsAt.split(':')[1]) > 59 ||\r\n        Number.parseInt(endsAt.split(':')[1]) < 0 ||\r\n        Number.parseInt(endsAt.split(':')[1]) > 59\r\n    ) {\r\n        throw new Error(\r\n            'SlotPicker Error: hours value is between 00-23, and minutes is between 00-59'\r\n        );\r\n    }\r\n    let [selectedTime, setSelectedTime] = useState(defaultSelectedTime);\r\n    useEffect(() => {\r\n        setSelectedTime(defaultSelectedTime)\r\n    }, [defaultSelectedTime])\r\n\r\n    const handleSelection = (data) => {\r\n        // let slots = [];\r\n        // if (selectedTime.includes(data.format('hh:mm'))) {\r\n        //     slots = selectedTime.filter(\r\n        //         (item) => item !== data.format('hh:mm')\r\n        //     );\r\n        // } else {\r\n        //     slots = [data.format('hh:mm')].concat(selectedTime);\r\n        // }\r\n\r\n        // console.log(slots, selectedTime)\r\n        // let tempSlots = slots.filter((item) => item != undefined);\r\n        setSelectedTime([data.format('hh:mm') + \"\" + amOrPm(data)]);\r\n        onSelectTime(data.format('hh:mm') + \"\" + amOrPm(data));\r\n    };\r\n\r\n    return (\r\n        <div className={classes}>\r\n            <div\r\n                className={`time-selector-w d-block ${lang == 'ar' && 'sp-rtl'\r\n                    }`}\r\n            >\r\n                <div className=\"os-times-w\">\r\n                    <div className=\"timeslots\">\r\n                        {timeSlots.map((slot, i) => (\r\n                            <TimeSlot\r\n                                interval={interval}\r\n                                // the slot is off if it's less then current time or already blacklisted(in unAvailableSlots)\r\n                                selectedSlotColor={selectedSlotColor}\r\n                                slot={slot}\r\n                                key={i}\r\n                                isSelected={selectedTime.includes(\r\n                                    slot.format('hh:mm') + \"\" + amOrPm(slot)\r\n                                )}\r\n                                onSelect={handleSelection}\r\n                                disabled={disabledSlots.includes(slot.format('hh:mm') + \"\" + amOrPm(slot))}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport Calendar from 'react-calendar';\r\nimport SlotPicker from './timeslots/SlotPicker';\r\nimport { amOrPm } from '../../utilities/timeUtilities';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchSchedules } from '../../store/schedulesSlice';\r\nimport { fetchUsers } from '../../store/usersSlice';\r\nimport {\r\n    updateRegisterSchedule,\r\n} from '../../store/userScheduleSlice';\r\nimport {\r\n    fetchBranches,\r\n} from '../../store/branchesSlice';\r\nimport Select from '../../components/form/Select';\r\nimport {\r\n    addToImutableObject,\r\n    getOffDatesFromDays,\r\n    getOffDatesFromDates,\r\n    getSessionStorage,\r\n    get_all_dates,\r\n    prepareScheduleSessionData,\r\n    saveSessionData,\r\n    setSessionStorage,\r\n} from '../../utilities/utilities';\r\n\r\nexport default function SessionDetails() {\r\n    const pageNo = 1;\r\n    const { schedules } = useSelector((state) => state.schedules);\r\n    const [date, setDate] = useState(null);\r\n    const [currentDateString, setCurrentDateString] = useState(\r\n        new Date().getFullYear() +\r\n        '-' +\r\n        (new Date().getMonth() + 1) +\r\n        '-' +\r\n        new Date().getDate()\r\n    );\r\n\r\n    const [doctors, setDoctors] = useState([]);\r\n    const [specialities, setSpecialities] = useState([]);\r\n    const [filteredDoctors, setFilteredDoctors] = useState([]);\r\n    const [defaultSelectedTime, setDefaultSelectedTime] = useState([]);\r\n    const [unAvailableSlots, setUnAvailableSlots] = useState([]);\r\n    const [filteredSchedule, setFilteredSchedule] = useState({\r\n        timeSlots: [],\r\n        perSessionLength: 60,\r\n    });\r\n    const [timeSlots, setTimeSlots] = useState([]);\r\n    const [offDates, setOffDates] = useState([]);\r\n    const [currentBranches, setCurrentBranches] = useState([]);\r\n\r\n    const ref = React.useRef();\r\n    const dispatch = useDispatch();\r\n\r\n    const { users } = useSelector((state) => state.users);\r\n    const {\r\n        registerUserSchedule,\r\n        currentDoctorSchedules,\r\n        isNewSchedule,\r\n        defaultSchedule,\r\n    } = useSelector((state) => state.userSchedules);\r\n    const { branches } = useSelector((state) => state.branches);\r\n\r\n\r\n    useEffect(() => {\r\n        if (isNewSchedule) {\r\n            setDate(null);\r\n            setUnAvailableSlots([]);\r\n            setUnAvailableSlots([]);\r\n            setDefaultSelectedTime([]);\r\n            setOffDates([]);\r\n            let allDates = document.querySelectorAll('.react-calendar__tile');\r\n            Object.values(allDates).map((date) => {\r\n                date.classList.remove('bg-themeColor');\r\n                date.classList.remove('text-white');\r\n            });\r\n        }\r\n    }, [isNewSchedule]);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchSchedules());\r\n        dispatch(fetchUsers());\r\n        dispatch(\r\n            fetchBranches({\r\n                endpoint: '/api/branches',\r\n                config: {},\r\n            })\r\n        );\r\n        let sessionData = getSessionStorage(['registerUserSchedule']);\r\n        if (!Object.keys(sessionData).length) {\r\n            saveSessionData('registerUserSchedule', defaultSchedule);\r\n        } else {\r\n            dispatch(\r\n                updateRegisterSchedule(sessionData['registerUserSchedule'])\r\n            );\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        let tempBranches = structuredClone(branches)\r\n        tempBranches.unshift({ _id: 'online', name: 'online' })\r\n\r\n        setCurrentBranches(tempBranches)\r\n    }, [branches])\r\n\r\n    useEffect(() => {\r\n        let data = users.filter((user, i) => user.userRole === 'DOCTOR');\r\n        setDoctors(data);\r\n        let specialities = [];\r\n        data.map((doctor) => {\r\n            if (!specialities.includes(doctor.speciality.toLowerCase())) {\r\n                specialities.push(doctor.speciality.toLowerCase());\r\n            }\r\n        });\r\n        setSpecialities(specialities);\r\n        setFilteredDoctors(data);\r\n    }, [users]);\r\n\r\n    useEffect(() => {\r\n        let limit = 100;\r\n        let startsAt = '00:00';\r\n        let endsAt = '23:00';\r\n        let interval = filteredSchedule.perSessionLength;\r\n        let slots = [];\r\n        let initialSlots = 7;\r\n        while (\r\n            dayjs(`2001-01-01 ${startsAt}`, 'YYYY-MM-DD HH:mm').isBefore(\r\n                dayjs(`2001-01-01 ${endsAt}`, 'YYYY-MM-DD HH:mm')\r\n            ) &&\r\n            limit > 0\r\n        ) {\r\n            let t = dayjs()\r\n                .set('h', Number.parseInt(startsAt.split(':')[0]))\r\n                .set('m', Number.parseInt(startsAt.split(':')[1]))\r\n                .add(interval, 'm');\r\n            if (\r\n                filteredSchedule.timeSlots.length &&\r\n                filteredSchedule.timeSlots.includes(t.format('HH:mm'))\r\n            ) {\r\n                slots.push(t);\r\n            }\r\n            if (filteredSchedule.timeSlots.length < 1) {\r\n                slots.length <= initialSlots && slots.push(t);\r\n            }\r\n\r\n            startsAt = t.format('HH:mm');\r\n            limit--;\r\n        }\r\n\r\n        if (registerUserSchedule[pageNo].session_time) {\r\n            setDefaultSelectedTime([registerUserSchedule[pageNo].session_time]);\r\n        }\r\n        setTimeSlots(slots);\r\n    }, [filteredSchedule]);\r\n\r\n    useEffect(() => {\r\n        let dates = document.getElementsByClassName(\r\n            'react-calendar__month-view__days__day'\r\n        );\r\n        Object.values(dates).map((date) => {\r\n            if (date.hasAttribute('disabled')) {\r\n                date.classList.add('bg-[#b9b9b9]');\r\n                // date.classList.add('text-white')\r\n                date.classList.remove('hover:bg-themeColor');\r\n                date.classList.remove('hover:text-white');\r\n            } else {\r\n                date.classList.remove('bg-[#b9b9b9]');\r\n                date.classList.remove('text-white');\r\n                date.classList.add('hover:bg-themeColor');\r\n                date.classList.add('hover:text-white');\r\n            }\r\n        });\r\n    }, [offDates]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (registerUserSchedule[pageNo].session_date)\r\n            setDate(new Date(registerUserSchedule[pageNo].session_date));\r\n        if (registerUserSchedule[pageNo].doctor_id) {\r\n            let filteredSchedule = schedules.filter(\r\n                (schedule) =>\r\n                    schedule.user === registerUserSchedule[pageNo].doctor_id\r\n            );\r\n            if (filteredSchedule.length && filteredSchedule[0].offDay.length) {\r\n                let tempOffDates = []\r\n                if (offDates.length) {\r\n                    tempOffDates = getOffDatesFromDates(\r\n                        offDates,\r\n                        currentDateString\r\n                    );\r\n                } else {\r\n                    tempOffDates = getOffDatesFromDays(\r\n                        filteredSchedule[0].offDay,\r\n                        currentDateString\r\n                    );\r\n                }\r\n                setOffDates(tempOffDates);\r\n                setFilteredSchedule(filteredSchedule[0]);\r\n            }\r\n        }\r\n    }, [registerUserSchedule, schedules]);\r\n\r\n    useEffect(() => {\r\n        if (date !== null) {\r\n            let selectedDay = parseInt(date.getDate());\r\n            let allDates = document.querySelectorAll('.react-calendar__tile');\r\n            Object.values(allDates).map((date) => {\r\n                if (parseInt(date.firstChild.innerText) === selectedDay) {\r\n                    date.classList.add('bg-themeColor');\r\n                    date.classList.add('text-white');\r\n                } else {\r\n                    date.classList.remove('bg-themeColor');\r\n                    date.classList.remove('text-white');\r\n                }\r\n            });\r\n        }\r\n    }, [date]);\r\n\r\n    const addToSelectedArray = (time) => {\r\n        let data = prepareScheduleSessionData('session_time', time);\r\n        dispatch(updateRegisterSchedule(data));\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        let filterBranches = []\r\n\r\n        // Filter current doctor schedules from users.\r\n        if (e.target.name === 'session_name') {\r\n            let filteredDoctors = doctors.filter(\r\n                (doctor) => doctor.speciality.toLowerCase() === e.target.value.toLowerCase()\r\n            );\r\n            if (filteredDoctors.length) setFilteredDoctors(filteredDoctors);\r\n        }\r\n        if (e.target.name === 'doctor_id') {\r\n            // filter current doctor schedules.\r\n            let filteredSchedule = schedules.filter(\r\n                (schedule) => schedule.user === e.target.value\r\n            );\r\n            if (filteredSchedule.length && filteredSchedule[0].offDay.length) {\r\n                prepareScheduleSessionData(\r\n                    'per_session_length',\r\n                    filteredSchedule[0].perSessionLength\r\n                );\r\n\r\n                setFilteredSchedule(filteredSchedule[0]);\r\n            }\r\n\r\n            // filter current doctor branches.\r\n            if (e.target.value !== '0') {\r\n                filteredSchedule.map(schedule => {\r\n                    branches.map(branch => {\r\n                        if (branch._id === schedule.branch) {\r\n                            filterBranches.push(branch)\r\n                        }\r\n                    })\r\n                })\r\n                filterBranches.unshift({ _id: 'online', name: 'online' })\r\n                setCurrentBranches(filterBranches)\r\n            }\r\n        }\r\n\r\n        if (e.target.name === 'branch_id') {\r\n            let session_fee = null\r\n            schedules.map(schedule => {\r\n                if (e.target.value === schedule.branch) {\r\n                    session_fee = schedule.sessionFee\r\n                }\r\n            })\r\n            if (session_fee) {\r\n                let data = prepareScheduleSessionData('session_fee', session_fee, 1);\r\n                dispatch(updateRegisterSchedule(data));\r\n            }\r\n        }\r\n\r\n\r\n        let data = prepareScheduleSessionData(e.target.name, e.target.value, 1);\r\n        dispatch(updateRegisterSchedule(data));\r\n    };\r\n\r\n    const setSessionDate = (date) => {\r\n        setDate(date);\r\n        let data = prepareScheduleSessionData('session_date', date);\r\n        dispatch(updateRegisterSchedule(data));\r\n        if (currentDoctorSchedules.length) {\r\n            let bookedSchedules = [];\r\n            for (let i = 0; i < currentDoctorSchedules.length; i++) {\r\n                let session = currentDoctorSchedules[i];\r\n                let tempDate = new Date(session.session_date);\r\n                if (tempDate.getMonth() === date.getMonth() && tempDate.getDate() === date.getDate()) {\r\n                    bookedSchedules.push(session.session_time);\r\n                }\r\n            }\r\n            setUnAvailableSlots(bookedSchedules);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let tempOffDates = JSON.parse(JSON.stringify(offDates));\r\n        let tempObj = {};\r\n        let currentMonth = new Date().getMonth();\r\n\r\n        if (currentDoctorSchedules.length) {\r\n            for (let i = 0; i < currentDoctorSchedules.length; i++) {\r\n                let session = currentDoctorSchedules[i];\r\n\r\n                let tempDate = new Date(session.session_date);\r\n\r\n                if (tempDate.getMonth() === currentMonth) {\r\n                    if (!tempObj[tempDate.getDate()]) {\r\n                        tempObj[tempDate.getDate()] = [session.session_time];\r\n                    } else {\r\n                        tempObj[tempDate.getDate()].push(session.session_time);\r\n                    }\r\n                }\r\n            }\r\n\r\n            Object.keys(tempObj).map((date) => {\r\n                if (tempObj[date].length === timeSlots.length) {\r\n                    tempOffDates.push(parseInt(date));\r\n                }\r\n            });\r\n\r\n            setOffDates(tempOffDates);\r\n        }\r\n    }, [currentDoctorSchedules]);\r\n\r\n    return (\r\n        <div className=\"flex flex-wrap justify-start  py-4 mb-12 sm:mb-8 \">\r\n            <div className=\"w-44\">\r\n                <label htmlFor=\"session_name\">Session</label>\r\n                <Select\r\n                    value={\r\n                        registerUserSchedule[pageNo].session_name\r\n                            ? registerUserSchedule[pageNo].session_name\r\n                            : '0'\r\n                    }\r\n                    onChange={(e) => onChange(e)}\r\n                    defaultOption=\"Select Session\"\r\n                    classes={'border w-44 p-2'}\r\n                    options={specialities}\r\n                    id=\"session_name\"\r\n                    name=\"session_name\"\r\n                    required={true}\r\n                />\r\n            </div>\r\n            <div className=\"ml-2 w-44\">\r\n                <label htmlFor=\"doctor_id\">Doctor</label>\r\n                <Select\r\n                    onChange={(e) => onChange(e)}\r\n                    defaultOption=\"Select Doctor\"\r\n                    classes={'border w-44 p-2'}\r\n                    options={filteredDoctors}\r\n                    id=\"doctor_id\"\r\n                    name=\"doctor_id\"\r\n                    required={true}\r\n                    value={\r\n                        registerUserSchedule[pageNo].doctor_id\r\n                            ? registerUserSchedule[pageNo].doctor_id\r\n                            : '0'\r\n                    }\r\n                />\r\n            </div>\r\n            <div className=\" ml-2 w-44\">\r\n                <label htmlFor=\"branch_id\">Branch Name</label>\r\n                <Select\r\n                    onChange={(e) => onChange(e)}\r\n                    defaultOption=\"Select Branch\"\r\n                    classes={'border w-44 p-2'}\r\n                    options={currentBranches}\r\n                    id=\"branch_id\"\r\n                    name=\"branch_id\"\r\n                    required={true}\r\n                    value={\r\n                        registerUserSchedule[pageNo].branch_id\r\n                            ? registerUserSchedule[pageNo].branch_id\r\n                            : '0'\r\n                    }\r\n                />\r\n            </div>\r\n\r\n            <div className=\"w-72\">\r\n                <label htmlFor=\"session_date\">Select Date</label>\r\n                <Calendar\r\n                    tileClassName={\r\n                        'p-2.5 hover:text-white hover:bg-themeColor '\r\n                    }\r\n                    tileDisabled={({ activeStartDate, date, view }) => {\r\n                        if (offDates.includes(date.getDate())) {\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    }}\r\n                    className=\"mx-2 border border-themeColor session_date\"\r\n                    onChange={(e) => setSessionDate(e)}\r\n                    value={date}\r\n                    showNeighboringMonth={false}\r\n                    inputRef={ref}\r\n                    calendarType={'US'}\r\n                    onActiveStartDateChange={({\r\n                        action,\r\n                        activeStartDate,\r\n                        value,\r\n                        view,\r\n                    }) => {\r\n                        setCurrentDateString(\r\n                            activeStartDate.getFullYear() +\r\n                            '-' +\r\n                            (activeStartDate.getMonth() + 1) +\r\n                            '-' +\r\n                            activeStartDate.getDate()\r\n                        );\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className=\"w-44\">\r\n                <label htmlFor=\"session_time\">Session Time</label>\r\n                <SlotPicker\r\n                    interval={filteredSchedule.perSessionLength}\r\n                    from={'07:00'}\r\n                    to={'23:00'}\r\n                    unAvailableSlots={unAvailableSlots}\r\n                    lang={'en'}\r\n                    defaultSelectedTime={defaultSelectedTime}\r\n                    onSelectTime={(s) => addToSelectedArray(s)}\r\n                    classes=\"hover:cursor-pointer\"\r\n                    timeSlots={timeSlots}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"names":["Select","id","name","selected","options","classes","defaultValue","value","defaultOption","addDefaultOption","required","onChange","autoComplete","className","classNames","length","getArrayOptions","getGroupDropdown","getObjectOptions","Object","values","hasOwnProperty","map","optionGroup","i","label","keys","optionName","index","currentOption","key","_id","option","slice","toUpperCase","TimeSlot","slot","interval","selectedSlotColor","lang","isSelected","onSelect","disabled","disableColor","isOnTheHour","get","handleOnSelect","e","preventDefault","style","background","color","format","amOrPm","add","onClick","dayjs","utc","duration","SlotPicker","unAvailableSlots","from","to","onSelectTime","timeSlots","defaultSelectedTime","themeColor","useSelector","state","common","disabledSlots","startsAt","endsAt","Number","parseInt","split","Error","useState","selectedTime","setSelectedTime","useEffect","handleSelection","data","includes","SessionDetails","schedules","date","setDate","Date","getFullYear","getMonth","getDate","currentDateString","setCurrentDateString","doctors","setDoctors","specialities","setSpecialities","filteredDoctors","setFilteredDoctors","setDefaultSelectedTime","setUnAvailableSlots","perSessionLength","filteredSchedule","setFilteredSchedule","setTimeSlots","offDates","setOffDates","currentBranches","setCurrentBranches","ref","React","dispatch","useDispatch","users","userSchedules","registerUserSchedule","currentDoctorSchedules","isNewSchedule","defaultSchedule","branches","allDates","document","querySelectorAll","classList","remove","fetchSchedules","fetchUsers","fetchBranches","endpoint","config","sessionData","getSessionStorage","updateRegisterSchedule","saveSessionData","tempBranches","structuredClone","unshift","filter","user","userRole","doctor","speciality","toLowerCase","push","limit","slots","isBefore","t","set","session_time","dates","getElementsByClassName","hasAttribute","session_date","doctor_id","schedule","offDay","tempOffDates","getOffDatesFromDates","getOffDatesFromDays","selectedDay","firstChild","innerText","filterBranches","target","prepareScheduleSessionData","branch","session_fee","sessionFee","JSON","parse","stringify","tempObj","currentMonth","session","tempDate","htmlFor","session_name","branch_id","tileClassName","tileDisabled","activeStartDate","view","bookedSchedules","setSessionDate","showNeighboringMonth","inputRef","calendarType","onActiveStartDateChange","action","s","time","addToSelectedArray"],"sourceRoot":""}