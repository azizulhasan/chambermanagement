{"version":3,"file":"static/js/229.720ca038.chunk.js","mappings":"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","sources":["pages/appointment/ModalContent.js","pages/Appoinment.js"],"sourcesContent":["import React, { useEffect, lazy, Suspense } from 'react';\r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { clearRegisterUserSchedule, clearUserSchedule, saveUserSchedule } from '../../store/userScheduleSlice';\r\nimport { getSessionStorage, prepareDataForSave, saveSessionData } from '../../utilities/utilities';\r\nimport { userFromSchedule } from '../../store/usersSlice';\r\nimport { useState } from 'react';\r\n// import { proceed_to_pay } from '../../store/paymentSlice';\r\n\r\nconst SessionDetails = lazy(() => import('./SessionDetails'))\r\nconst PatientDetails = lazy(() => import('./PatientDetails'))\r\nconst PaymentDetails = lazy(() => import('./PaymentDetails'))\r\nconst WelcomeMessage = lazy(() => import('./WelcomeMessage'))\r\n\r\nexport default function ModalContent() {\r\n    const slides = [\r\n        {\r\n            component: <SessionDetails />,\r\n        },\r\n        {\r\n            component: <PatientDetails />,\r\n        },\r\n        {\r\n            component: <WelcomeMessage />,\r\n        },\r\n        {\r\n            component: <PaymentDetails />,\r\n        },\r\n    ];\r\n    const { registerUserSchedule, frontUserSingleSchedule, defaultSchedule } = useSelector(\r\n        (state) => state.userSchedules\r\n    );\r\n    const { scheduleUser, users } = useSelector(\r\n        (state) => state.users\r\n    );\r\n    const { branches } = useSelector(\r\n        (state) => state.branches\r\n    );\r\n    const [pageNo, setPageNo] = useState(1)\r\n    const dispatch = useDispatch();\r\n    function isCurrentSlideIsValid(e, callback) {\r\n        let status =\r\n            document.getElementsByClassName('carousel-status')[0].innerHTML;\r\n        let currentPage = parseInt(status.split('of')[0]);\r\n        setPageNo(currentPage)\r\n        let slideObject = registerUserSchedule[currentPage];\r\n        let sessionData = getSessionStorage(['registerUserSchedule']);\r\n        if (sessionData === undefined) {\r\n            alert(\r\n                'Please fill the value of session_name, doctor_id, session_date, session_time.'\r\n            );\r\n        } else {\r\n            sessionData = sessionData['registerUserSchedule'];\r\n            sessionData = sessionData[currentPage];\r\n        }\r\n        let alertData = [];\r\n        Object.keys(slideObject).map((key) => {\r\n            if (\r\n                !sessionData.hasOwnProperty(key) ||\r\n                sessionData[key] === undefined ||\r\n                sessionData[key] === '' ||\r\n                sessionData[key] == '0'\r\n            ) {\r\n                if (key !== 'user_id') alertData.push(key);\r\n            }\r\n        });\r\n        if (alertData.length) {\r\n            alert('Please fill the value of ' + alertData.join(', '));\r\n        } else {\r\n            let data = getSessionStorage(['registerUserSchedule']);\r\n            data = data['registerUserSchedule'];\r\n            data = prepareDataForSave(data);\r\n\r\n            if (currentPage === 2) {\r\n                let userData = {\r\n                    email: data.email,\r\n                    name: data.name,\r\n                    phone: data.phone,\r\n                };\r\n                dispatch(userFromSchedule({\r\n                    endpoint: '/api/users/user_from_schedule',\r\n                    config: {\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        method: 'POST',\r\n                        body: JSON.stringify(userData),\r\n                    }\r\n                }));\r\n            }\r\n\r\n            callback();\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (scheduleUser.hasOwnProperty('_id')) {\r\n            prepareScheduleSessionData(\r\n                'user_id',\r\n                scheduleUser._id\r\n            );\r\n        }\r\n    }, [scheduleUser])\r\n\r\n    function prepareScheduleSessionData(\r\n        key,\r\n        value,\r\n        pageNumber = 2,\r\n        sessionKey = 'registerUserSchedule'\r\n    ) {\r\n        let sessionData = getSessionStorage([sessionKey]);\r\n        if (pageNumber && key && value) {\r\n            Object.keys(sessionData[sessionKey][pageNumber]).map(\r\n                (currentKey) => {\r\n                    if (currentKey == key) {\r\n                        sessionData[sessionKey][pageNumber][key] = value;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n        saveSessionData(sessionKey, sessionData[sessionKey]);\r\n    }\r\n\r\n    const submitSchedule = async (e, currentPage, callback) => {\r\n        e.preventDefault();\r\n        if (!document.getElementById('tems_and_conditions').checked) return alert('Please check the terms of services and refund policy.')\r\n\r\n        let data = getSessionStorage(['registerUserSchedule'])\r\n        data = prepareDataForSave(data['registerUserSchedule'])\r\n        branches.map(branch => {\r\n            if (data.branch_id === branch._id) {\r\n                data.branch_name = branch.name;\r\n            }\r\n        })\r\n        if (!data.hasOwnProperty('branch_name')) {\r\n            data.branch_name = 'online';\r\n        }\r\n        if (scheduleUser && scheduleUser.hasOwnProperty('name')) {\r\n            data.doctor_name = scheduleUser.name;\r\n        }\r\n\r\n        // Save session detail to database.\r\n        /**\r\n         * Mail session details to user\r\n         * \r\n         * Pro feature mail will be send to admin and doctor.\r\n         */\r\n        dispatch(\r\n            saveUserSchedule({\r\n                endpoint: '/api/userschedules',\r\n                config: {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    method: 'POST',\r\n                    body: JSON.stringify(data),\r\n                },\r\n            })\r\n        );\r\n\r\n        callback()\r\n\r\n\r\n    }\r\n\r\n    const proceedToPay = (e, frontUserSingleSchedule) => {\r\n        e.preventDefault();\r\n        if (frontUserSingleSchedule.hasOwnProperty('_id') && frontUserSingleSchedule._id) {\r\n            window.open('https://shop.bkash.com/md-mehedi-hasan01715703260/paymentlink/default-payment');\r\n            saveSessionData('registerUserSchedule', defaultSchedule);\r\n            dispatch(clearUserSchedule({}))\r\n            dispatch(clearRegisterUserSchedule(defaultSchedule))\r\n            ////////////////////////////////////////////////\r\n            // This code will be applied for sslcommercz\r\n            ///////////////////////////////////////////////\r\n            // dispatch(proceed_to_pay({\r\n            //     endpoint: '/api/payment',\r\n            //     config: {\r\n            //         headers: {\r\n            //             'Content-Type': 'application/json',\r\n            //         },\r\n            //         method: 'POST',\r\n            //         body: JSON.stringify(frontUserSingleSchedule),\r\n            //     },\r\n            // }))\r\n        } else {\r\n            alert('Something went wrong. Please try again.')\r\n        }\r\n    }\r\n\r\n\r\n    const getButtonPosition = () => {\r\n        let buttonPosition = 'top-[88%]';\r\n        if (pageNo === 4) {\r\n            buttonPosition = 'top-[35%]'\r\n            if (window.innerWidth > 575) {\r\n                buttonPosition = 'top-[50%]'\r\n            }\r\n        } else if (pageNo === 3) {\r\n            buttonPosition = 'top-[50%]'\r\n            if (window.innerWidth > 575) {\r\n                buttonPosition = 'top-[88%]'\r\n            }\r\n        } else if (pageNo === 2) {\r\n            buttonPosition = 'top-[50%]'\r\n        }\r\n\r\n        return buttonPosition;\r\n    }\r\n\r\n    return (\r\n        <Suspense fallback={<h1>Loading</h1>} >\r\n            <Carousel\r\n                showStatus={true} // default true. i.e 1 of 3\r\n                showThumbs={false}\r\n                autoPlay={false}\r\n                infiniteLoop={false}\r\n                emulateTouch={false}\r\n                autoFocus={true}\r\n                // showArrows={true}\r\n                showIndicators={false}\r\n                renderArrowPrev={(hasPrev, label) => (\r\n                    <button\r\n                        type=\"button\"\r\n                        className={[\"absolute top-[88%] left-[10%] sm:left-[44%] px-4 py-2 z-50 bg-themeColor text-white hover:bg-white hover:text-themeColor hover:border-2 hover:border-themeColor\", getButtonPosition()].join(' ')}\r\n                        onClick={hasPrev}\r\n                    >\r\n                        Back\r\n                    </button>\r\n                )}\r\n                renderArrowNext={(hasNext, label) => {\r\n                    let currentPage = 1;\r\n                    if (document.getElementsByClassName('carousel-status').length) {\r\n                        let status =\r\n                            document.getElementsByClassName('carousel-status')[0].innerHTML;\r\n                        currentPage = parseInt(status.split('of')[0]);\r\n                    }\r\n                    setPageNo(currentPage)\r\n                    {\r\n                        return currentPage !== 4 ? currentPage === 3 ? <button\r\n                            type=\"button\"\r\n                            className={[\"absolute top-[88%] left-[54%] justify-center px-4 py-2 z-50 bg-themeColor text-white hover:bg-white hover:text-themeColor hover:border-2 hover:border-themeColor\", getButtonPosition()].join(' ')}\r\n                            onClick={(e) => submitSchedule(e, currentPage, hasNext)}\r\n                        >\r\n                            Submit\r\n                        </button> : <button\r\n                            type=\"button\"\r\n                            className={[\"absolute left-[54%] justify-center px-4 py-2 z-50 bg-themeColor text-white hover:bg-white hover:text-themeColor hover:border-2 hover:border-themeColor\", getButtonPosition()].join(' ')}\r\n                            onClick={(e) => isCurrentSlideIsValid(e, hasNext)}\r\n                        >\r\n                            Next\r\n                        </button> : <button type='button' className={['absolute left-[54%] justify-center px-4 py-2 z-50 bg-themeColor text-white hover:bg-white hover:text-themeColor hover:border-2 hover:border-themeColor', getButtonPosition()].join(' ')} onClick={(e) => proceedToPay(e, frontUserSingleSchedule)}>Proceed To Pay</button>\r\n                    }\r\n                }}\r\n                className=\"presentation-mode appointment px-5 my-8\"\r\n            >\r\n                {slides.map((item, index) => {\r\n                    return <div key={index}>{item.component}</div>;\r\n                })}\r\n            </Carousel>\r\n        </Suspense>\r\n    );\r\n}\r\n","import FrontSkeleton from '../layouts/front/FrontSkeleton';\r\nimport ModalContent from './appointment/ModalContent';\r\n\r\nexport default function Appoinment() {\r\n    return (\r\n        <FrontSkeleton\r\n            css={[\r\n                '/assets/front/css/tailwind.css',\r\n                '/assets/front/css/carousel.css',\r\n                '/assets/front/css/appointment.css',\r\n                '/assets/front/css/footer.css',\r\n            ]}\r\n        >\r\n            <ModalContent />\r\n        </FrontSkeleton>\r\n    );\r\n}\r\n"],"names":["SessionDetails","lazy","PatientDetails","PaymentDetails","WelcomeMessage","ModalContent","slides","component","useSelector","state","userSchedules","registerUserSchedule","frontUserSingleSchedule","defaultSchedule","users","scheduleUser","branches","useState","pageNo","setPageNo","dispatch","useDispatch","useEffect","hasOwnProperty","key","value","pageNumber","sessionKey","sessionData","getSessionStorage","Object","keys","map","currentKey","saveSessionData","prepareScheduleSessionData","_id","submitSchedule","e","currentPage","callback","preventDefault","document","getElementById","checked","alert","data","prepareDataForSave","branch","branch_id","branch_name","name","doctor_name","saveUserSchedule","endpoint","config","headers","method","body","JSON","stringify","getButtonPosition","buttonPosition","window","innerWidth","Suspense","fallback","showStatus","showThumbs","autoPlay","infiniteLoop","emulateTouch","autoFocus","showIndicators","renderArrowPrev","hasPrev","label","type","className","join","onClick","renderArrowNext","hasNext","getElementsByClassName","length","status","innerHTML","parseInt","split","slideObject","undefined","alertData","push","userData","email","phone","userFromSchedule","isCurrentSlideIsValid","open","clearUserSchedule","clearRegisterUserSchedule","proceedToPay","item","index","Appoinment","FrontSkeleton","css"],"sourceRoot":""}