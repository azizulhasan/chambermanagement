{"version":3,"file":"static/js/868.dc584bfa.chunk.js","mappings":"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","sources":["components/common/ToolTip.js","components/form/Input.js","pages/appointment/PatientDetails.js"],"sourcesContent":["export default function ToolTip({ title, classes = '' }) {\r\n    return (\r\n        <span\r\n            className={[\r\n                'group-hover:opacity-100 transition-opacity bg-gray-800 px-4 py-2 text-sm text-gray-100 rounded-sm absolute left-1/2 -translate-x-1/2 translate-y-full opacity-0 mx-auto z-50',\r\n                classes,\r\n            ].join(' ')}\r\n        >\r\n            {title}\r\n        </span>\r\n    );\r\n}\r\n","import { classNames } from '../../utilities/utilities';\r\nimport ToolTip from '../common/ToolTip';\r\n\r\nexport default function Input({\r\n    label,\r\n    type = 'text',\r\n    name,\r\n    value = '',\r\n    placeholder = '',\r\n    classes = '',\r\n    required = false,\r\n    readOnly = false,\r\n    onBlur = null,\r\n    onChange = null,\r\n    toolTip = '',\r\n    validate = null,\r\n    toolTipCss = '',\r\n    errObj = { type: 'red-700', message: '', isFormSubmitted: false, fieldName: 'name' }\r\n}) {\r\n    return errObj.isFormSubmitted ? (\r\n        <>\r\n            <div className=\"group flex relative\">\r\n                {label && (\r\n                    <label\r\n                        className=\"inline-flex mt-1 text-gray-500 whitespace-nowrap\"\r\n                        htmlFor=\"input-field\"\r\n                    >\r\n                        {label}\r\n                    </label>\r\n                )}\r\n                <div>\r\n                    <input\r\n                        type={type}\r\n                        name={name}\r\n                        id={name}\r\n                        value={value}\r\n                        required={required}\r\n                        readOnly={readOnly}\r\n                        autoComplete=\"off\"\r\n                        placeholder={placeholder}\r\n                        className={classNames(\r\n                            'block rounded-md !border-gray-300 shadow-sm sm:text-sm',\r\n                            classes\r\n                        )}\r\n                        onChange={onChange && onChange}\r\n                        onBlur={onBlur && onBlur}\r\n                    />\r\n                    {errObj.isFormSubmitted && errObj.message && <p className={'ml-4 text-' + errObj.type + \" \" + errObj.fieldName}>{errObj.message}</p>}\r\n                </div>\r\n                {toolTip && <ToolTip classes={toolTipCss} title={toolTip} />}\r\n            </div>\r\n        </>\r\n    ) : (\r\n        <>\r\n            <div className=\"group flex\">\r\n                {label && (\r\n                    <label\r\n                        className=\"inline-flex mt-1 text-gray-500 whitespace-nowrap\"\r\n                        htmlFor=\"input-field\"\r\n                    >\r\n                        {label}\r\n                    </label>\r\n                )}\r\n                <input\r\n                    type={type}\r\n                    name={name}\r\n                    id={name}\r\n                    value={value}\r\n                    required={required}\r\n                    readOnly={readOnly}\r\n                    autoComplete=\"off\"\r\n                    placeholder={placeholder}\r\n                    className={classNames(\r\n                        'block rounded-md !border-gray-300 shadow-sm sm:text-sm',\r\n                        classes\r\n                    )}\r\n                    onChange={onChange && onChange}\r\n                    onBlur={onBlur && onBlur}\r\n                />\r\n            </div>\r\n            {toolTip && <ToolTip classes={toolTipCss} title={toolTip} />}\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport Input from '../../components/form/Input';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getFomattedDate, prepareScheduleSessionData } from '../../utilities/utilities';\r\nimport {\r\n    updateRegisterSchedule,\r\n    updateNewSessionNotice,\r\n    fetchDoctorSchedules,\r\n} from '../../store/userScheduleSlice';\r\nimport { fetchSingleUser } from '../../store/usersSlice';\r\nimport { fetchSchedules } from '../../store/schedulesSlice';\r\n\r\n\r\nexport default function PatientDetails() {\r\n    const dispatch = useDispatch();\r\n    const pageNo = 2;\r\n    const { registerUserSchedule, isNewSchedule, newSessionNotice } =\r\n        useSelector((state) => state.userSchedules);\r\n    const { schedules } =\r\n        useSelector((state) => state.schedules);\r\n    const { singleUser } = useSelector((state) => state.users);\r\n\r\n    useEffect(() => {\r\n        if (registerUserSchedule[1].doctor_id) {\r\n            dispatch(\r\n                fetchSchedules()\r\n            );\r\n            dispatch(fetchSingleUser(registerUserSchedule[1].doctor_id));\r\n\r\n        }\r\n    }, [registerUserSchedule]);\r\n\r\n    useEffect(() => {\r\n        if (singleUser.hasOwnProperty('name')) {\r\n            let date = getFomattedDate(registerUserSchedule[1].session_date);\r\n            let notice = getNewSessionNotice(singleUser.name, registerUserSchedule[1].session_time, date, registerUserSchedule[1].session_fee);\r\n            dispatch(updateNewSessionNotice(notice));\r\n        }\r\n    }, [singleUser]);\r\n\r\n\r\n    function getNewSessionNotice(doctorName, time, date, sessionFee) {\r\n        return `You selected a booking for Session with ${doctorName} at ${time}  on ${date}. The price for the service is à§³${sessionFee}.`;\r\n    }\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const getFormValue = (e) => {\r\n        let data = prepareScheduleSessionData(e.target.name, e.target.value, 2);\r\n        dispatch(updateRegisterSchedule(data));\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"col-span-12 pt-10\">\r\n                {!isNewSchedule && newSessionNotice && (\r\n                    <p>\r\n                        {newSessionNotice}\r\n                        <br />{' '}\r\n                        <strong>\r\n                            Please provide your details in the form below to\r\n                            proceed with booking.\r\n                        </strong>\r\n                    </p>\r\n                )}\r\n            </div>\r\n            <div className=\"flex flex-wrap  justify-between py-4 mb-8 \">\r\n                <div className=\"py-2 sm:py-0\">\r\n                    <Input\r\n                        label={'Patient Name'}\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        placeholder=\"Name\"\r\n                        id=\"name\"\r\n                        value={registerUserSchedule[pageNo].name}\r\n                        classes={'w-full border p-2'}\r\n                        onChange={(e) => getFormValue(e)}\r\n                    />\r\n                </div>\r\n                <div className=\"py-2 sm:py-0\">\r\n                    <Input\r\n                        label={'Email ID'}\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        id=\"email\"\r\n                        value={registerUserSchedule[pageNo].email}\r\n                        classes={'w-full border p-2 '}\r\n                        onChange={(e) => getFormValue(e)}\r\n                        validate={register('email', {\r\n                            required: true,\r\n                            pattern:\r\n                                /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n                        })}\r\n                    />\r\n                    {errors.email && (\r\n                        <span className=\"error\">Emai is require.</span>\r\n                    )}\r\n                </div>\r\n                <div className=\" py-2 sm:py-0\">\r\n                    <Input\r\n                        label={'Phone Number'}\r\n                        name=\"phone\"\r\n                        type=\"number\"\r\n                        placeholder=\"Phone number\"\r\n                        id=\"phone\"\r\n                        value={registerUserSchedule[pageNo].phone}\r\n                        classes={'w-full border p-2'}\r\n                        onChange={(e) => getFormValue(e)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n"],"names":["ToolTip","title","classes","className","join","Input","label","type","name","value","placeholder","required","readOnly","onBlur","onChange","toolTip","validate","toolTipCss","errObj","message","isFormSubmitted","fieldName","htmlFor","id","autoComplete","classNames","PatientDetails","dispatch","useDispatch","useSelector","state","userSchedules","registerUserSchedule","isNewSchedule","newSessionNotice","singleUser","schedules","users","useEffect","doctor_id","fetchSchedules","fetchSingleUser","hasOwnProperty","date","getFomattedDate","session_date","notice","doctorName","time","sessionFee","getNewSessionNotice","session_time","session_fee","updateNewSessionNotice","useForm","register","errors","handleSubmit","formState","getFormValue","e","data","prepareScheduleSessionData","target","updateRegisterSchedule","email","pattern","phone"],"sourceRoot":""}